import os
from gtts import gTTS
import streamlit as st

# Funci√≥n para convertir texto a audio y guardar el archivo
def text_to_speech(text):
    tts = gTTS(text=text, lang='es')  # 'es' para espa√±ol
    audio_file = "speech_output.mp3"
    tts.save(audio_file)
    return audio_file

# Configuraci√≥n de la p√°gina de Streamlit
st.set_page_config(page_title="Conversor de Texto a Audio", page_icon="üé§")

# T√≠tulo y descripci√≥n
st.title("üé§ Conversor de Texto a Audio")
st.write("Introduce el texto que deseas convertir a audio y presiona el bot√≥n para escuchar la respuesta.")

# Inicializar el estado de la sesi√≥n si no est√° ya inicializado
if 'audio_bytes' not in st.session_state:
    st.session_state['audio_bytes'] = None

# Campo de texto para ingresar el texto
text_input = st.text_area("Escribe el texto aqu√≠", height=150)

# Bot√≥n para convertir a audio
if st.button("Convertir a Audio"):
    if text_input.strip():
        audio_path = text_to_speech(text_input)
        st.success("‚úÖ El audio ha sido generado. Puedes reproducirlo o descargarlo a continuaci√≥n.")
        
        # Reproducir el archivo de audio generado y guardarlo en la sesi√≥n
        with open(audio_path, "rb") as audio_file:
            st.session_state['audio_bytes'] = audio_file.read()  # Guardar en el estado de sesi√≥n
            st.audio(st.session_state['audio_bytes'], format="audio/mp3")

# Si hay un archivo de audio en el estado de sesi√≥n, mostrarlo y permitir la descarga
if st.session_state['audio_bytes']:
    st.audio(st.session_state['audio_bytes'], format="audio/mp3")
    
    # Bot√≥n para descargar el archivo de audio
    st.download_button(
        label="Descargar Audio",
        data=st.session_state['audio_bytes'],
        file_name="speech_output.mp3",  # Asegura que la extensi√≥n sea .mp3
        mime="audio/mp3"
    )

# Informaci√≥n adicional
st.write("Este conversor usa la tecnolog√≠a de Google Text-to-Speech (gTTS).")


